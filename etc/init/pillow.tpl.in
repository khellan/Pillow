#!/bin/sh -e

# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

### BEGIN INIT INFO
# Provides:          pillow
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Pillow init script
# Description:       Pillow init script for the database server.
### END INIT INFO

SCRIPT_OK=0
SCRIPT_ERROR=1

DESCRIPTION="database shard handler"
NAME=pillow
SCRIPT_NAME=`basename $0`
PILLOW=%bindir%/%pillow_command_name%
CONFIGURATION_FILE=%sysconfdir%/default/pillow
RUN_DIR=%localstaterundir%
LSB_LIBRARY=/lib/lsb/init-functions

if test ! -x $PILLOW; then
    exit $SCRIPT_ERROR
fi

if test -r $CONFIGURATION_FILE; then
    . $CONFIGURATION_FILE
fi

log_daemon_msg () {
    # Dummy function to be replaced by LSB library.

    echo $@
}

log_end_msg () {
    # Dummy function to be replaced by LSB library.

    if test "$1" != "0"; then
      echo "Error with $DESCRIPTION: $NAME"
    fi
    return $1
}

if test -r $LSB_LIBRARY; then
    . $LSB_LIBRARY
fi

start_pillow () {
    # Start Pillow as a background process.

    command="$PILLOW -b"
    if test -n "$PILLOW_STDOUT_FILE"; then
        command="$command -o $PILLOW_STDOUT_FILE"
    fi
    if test -n "$PILLOW_STDERR_FILE"; then
        command="$command -e $PILLOW_STDERR_FILE"
    fi
    if test -n "$PILLOW_RESPAWN_TIMEOUT"; then
        command="$command -r $PILLOW_RESPAWN_TIMEOUT"
    fi
    if test -n "$PILLOW_OPTIONS"; then
        command="$command $PILLOW_OPTIONS"
    fi
    mkdir -p "$RUN_DIR"
    if test -n "$PILLOW_USER"; then
        chown $PILLOW_USER "$RUN_DIR"
        if su $PILLOW_USER -c "cd ${RUN_DIR}; $command" > /dev/null; then
            return $SCRIPT_OK
        else
            return $SCRIPT_ERROR
        fi
    else
        if $command > /dev/null; then
            return $SCRIPT_OK
        else
            return $SCRIPT_ERROR
        fi
    fi
}

stop_pillow () {
    # Stop the running Pillow process.

    command="$PILLOW -d"
    if test -n "$PILLOW_OPTIONS"; then
        command="$command $PILLOW_OPTIONS"
    fi
    if test -n "$PILLOW_USER"; then
        if su $PILLOW_USER -c "cd ${RUN_DIR}; $command" > /dev/null; then
            return $SCRIPT_OK
        else
            return $SCRIPT_ERROR
        fi
    else
        if $command > /dev/null; then
            return $SCRIPT_OK
        else
            return $SCRIPT_ERROR
        fi
    fi
}

display_status () {
    # Display the status of the running Pillow process.

    $PILLOW -s
}

reshard_pillow() {
    # Reshard Pillow to use the new set of databases

    su $PILLOW_USER -c "(cd $RUN_DIR;$PILLOW -m)"
}

flip_pillow() {
    # Flip Pillow to use the new set of databases directly after resharding

    su $PILLOW_USER -c "(cd $RUN_DIR;$PILLOW -f)"
}

reshard_and_flip_pillow() {
    # Reshard Pillow to use the new set of databases and flip to use them directly

    su $PILLOW_USER -c "(cd $RUN_DIR;$PILLOW -F"
}

parse_script_option_list () {
    # Parse arguments passed to the script and take appropriate action.

    case "$1" in
        start)
            log_daemon_msg "Starting $DESCRIPTION" $NAME
            if start_pillow; then
                log_end_msg $SCRIPT_OK
            else
                log_end_msg $SCRIPT_ERROR
            fi
            ;;
        stop)
            log_daemon_msg "Stopping $DESCRIPTION" $NAME
            if stop_pillow; then
                log_end_msg $SCRIPT_OK
            else
                log_end_msg $SCRIPT_ERROR
            fi
            ;;
        reshard)
            log_daemon_msg "Resharding $DESCRIPTION" $NAME
            if reshard_pillow; then
                log_end_msg $SCRIPT_OK
            else
                log_end_msg $SCRIPT_ERROR
            fi
            ;;
        flip)
            log_daemon_msg "Flipping $DESCRIPTION" $NAME
            if flip_pillow; then
                log_end_msg $SCRIPT_OK
            else
                log_end_msg $SCRIPT_ERROR
            fi
            ;;
        reshard_and_flip)
            log_daemon_msg "Resharding and flipping $DESCRIPTION" $NAME
            if reshard_and_flip_pillow; then
                log_end_msg $SCRIPT_OK
            else
                log_end_msg $SCRIPT_ERROR
            fi
            ;;
        restart|force-reload)
            log_daemon_msg "Restarting $DESCRIPTION" $NAME
            if stop_pillow; then
                if start_pillow; then
                    log_end_msg $SCRIPT_OK
                else
                    log_end_msg $SCRIPT_ERROR
                fi
            else
                log_end_msg $SCRIPT_ERROR
            fi
            ;;
        status)
            display_status
            ;;
        *)
            cat << EOF >&2
Usage: $SCRIPT_NAME {start|stop|restart|force-reload|status}
EOF
            exit $SCRIPT_ERROR
            ;;
    esac
}

parse_script_option_list $@
